1.	Array (Dutch National Flag) (Adedimeji, 2023)
Het “Dutch National Flag” algoritme is bedacht door Edsger Dijkstra met als doel het sorteren van elementen waarbij 
de elementen slechts een beperkt aantal unieke waarden hebben, zoals een lijst die alleen de waardes 1, 2, of 3 kan 
bevatten. Het doel, in dit voorbeeld, is om de array te sorteren zodat alle elementen met de waarde 1 aan het begin 
staan, gevolgd door alle elementen met 2, en tot slot de elementen met 3.
'
De connectie tussen deze algoritme en Big O is vrij eenvoudig. Het algoritme loop alleen 1 keer door de array heen 
en voor elk element in de array alleen een beperkte aantal operaties uitvoert op de elementen door de denkwijze van 
deze algoritme. Dit levert een lineaire O(n) tijdcomplexiteit op wat het algoritme efficiënt maakt, zelfs voor 
gigantische lijsten.


2.	Stack (Balanced Parentheses) (GeeksforGeeks, 2023)
 Het “Balanced Parentheses” algoritme probeert een computerwetenschappelijk probleem op te lossen. Het controleert 
of haakjes, zoals (), [], {} etc., in een correcte wiskundige expressie/code zijn uitgebalanceerd/genest. 
Gebalanceerd in dit context is of de openingshaak met het correct sluitingshaakje wordt afgesloten. In het 
geval van Stacks moeten het sluitingshaakje vlak na het openingshaakje zijn.

In dit algoritme is de Big-O iets uitgebreider vergeleken met de vorige algoritme, maar nog steeds vrij eenvoudig. 
Het algoritme moet tenminste 1 keer door de Stack heenlopen om te zien of er wijzigingen nodig zijn. Wanneer dit 
het geval is gebeurd er een Deletion of Insertion operatie. Voor het inlezen is de tijdcomplexiteit lineair O(n), 
en voor het invoegen en verwijderen O(1). In theorie zou de algoritme dus erg efficiënt zijn omdat het lineair, 
of zelfs beter dan lineair is, maar in realiteit, door de nature van een Stack, is het vrij inefficiënt.


3.	List (Merge Sort) (GeeksforGeeks, 2023)
Het “Merge Sort” algoritme is een sorteeralgoritme die een lijst opsplitst in meerdere sub-lijsten. Deze 
sub-lijsten bestaan uit een element vanuit de originele lijst, plus het eerstvolgende element. Hierin worden de 
twee elementen vergeleken, en vervolgens verwisseld als de tweede element kleiner is dan het eerste element. 
Nadat dit bij alle sub-lijsten gebeurd is, zal de algoritme een sub-lijst vergelijken met de eerstvolgende sub-lijst. 
Hier alweer vergelijkt het en verwisselt het wanneer van toepassing. Zodra dit klaar is worden de sub-lijsten 
samengevoegd, totdat alle sub-lijsten samengevoegd zijn tot 1 gehele gesorteerde lijst.

Dit is de meest complexe algoritme van de 3 in de context van Big O. Dit komt namelijk doordat de tijdcomplexiteit 
in twee gedeeltes opgesplitst kan worden.

    1.	Het algoritme splitst de lijst constant in tweeën totdat het een sub-lijsten zijn met een enkel element. 
    Hierdoor is de tijdcomplexiteit logaritmisch O(log n) met “n” die de lengte van de originele lijst aanduidt.
    2.	Vervolgens worden de sub-lijsten telkens samengevoegd en gesorteerd tot dubbel zijn grootte totdat er 
    één sub-lijst is die de grootte van de originele lijst bereikt. Dit zijn gewone operaties van een lijst 
    waardoor de tijdcomplexiteit O(n) aanduidt.

Wanneer deze twee gedeeltes gecombineerd worden, kan de tijdcomplexiteit voor de gehele algoritme aangeduid 
worden als O(n log n).


Geciteerde werken
    Adedimeji, I. L. (2023, Juni). Introduction to Arrays and Their Algorithms. Opgehaald van Medium: https://medium.com/@ibrahimlanre1890/introduction-to-arrays-and-their-algorithms-f6d88c86d14
    GeeksforGeeks. (2023, Mei). Check for Balanced Brackets in an expression (well-formedness). Opgehaald van GeeksforGeeks: https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/
    GeeksforGeeks. (2023, November). Merge Sort – Data Structure and Algorithms Tutorials. Opgehaald van GeeksforGeeks: https://www.geeksforgeeks.org/merge-sort/

